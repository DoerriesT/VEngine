#version 450

#include "irradianceVolumeRayMarching_bindings.h"
#include "common.h"

layout(set = OPACITY_IMAGE_SET, binding = OPACITY_IMAGE_BINDING) uniform sampler3D uOpacityImage;
layout(set = VOXEL_IMAGE_SET, binding = VOXEL_IMAGE_BINDING) uniform sampler3D uVoxelImage;
layout(set = RESULT_IMAGE_SET, binding = RESULT_IMAGE_BINDING, rgba16f) uniform image2D uResultImage;
layout(set = DISTANCE_IMAGE_SET, binding = DISTANCE_IMAGE_BINDING, r16f) uniform image2D uDistanceImage;

layout(set = QUEUE_BUFFER_SET, binding = QUEUE_BUFFER_BINDING) readonly buffer QUEUE_BUFFER
{
	uint uQueueSize;
	float uP;
	uint uQueue[];
};

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout(constant_id = GRID_WIDTH_CONST_ID) const uint cGridWidth = 64;
layout(constant_id = GRID_HEIGHT_CONST_ID) const uint cGridHeight = 32;
layout(constant_id = GRID_DEPTH_CONST_ID) const uint cGridDepth = 64;
layout(constant_id = CASCADES_CONST_ID) const uint cCascades = 3;
layout(constant_id = GRID_BASE_SCALE_CONST_ID) const float cGridBaseScale = 2.0;
layout(constant_id = VOXEL_GRID_WIDTH_CONST_ID) const uint cVoxelGridWidth = 128;
layout(constant_id = VOXEL_GRID_HEIGHT_CONST_ID) const uint cVoxelGridHeight = 64;
layout(constant_id = VOXEL_GRID_DEPTH_CONST_ID) const uint cVoxelGridDepth = 128;
layout(constant_id = VOXEL_CASCADES_CONST_ID) const uint cVoxelCascades = 3;
layout(constant_id = VOXEL_BASE_SCALE_CONST_ID) const float cVoxelGridBaseScale = 4.0;


layout (local_size_x = IRRADIANCE_VOLUME_RAY_MARCHING_RAY_COUNT, local_size_y = 1, local_size_z = 1) in;


/**  Generate a spherical fibonacci point

    http://lgdv.cs.fau.de/publications/publication/Pub.2015.tech.IMMD.IMMD9.spheri/

    To generate a nearly uniform point distribution on the unit sphere of size N, do
    for (float i = 0.0; i < N; i += 1.0) {
        float3 point = sphericalFibonacci(i,N);
    }

    The points go from z = +1 down to z = -1 in a spiral. To generate samples on the +z hemisphere,
    just stop before i > N/2.

*/
vec3 sphericalFibonacci(float i, float n) {
    const float PHI = sqrt(5) * 0.5 + 0.5;
#   define madfrac(A, B) ((A)*(B)-floor((A)*(B)))
    float phi = 2.0 * PI * madfrac(i, PHI - 1);
    float cosTheta = 1.0 - (2.0 * i + 1.0) * (1.0 / n);
    float sinTheta = sqrt(clamp(1.0 - cosTheta * cosTheta, 0.0, 1.0));

    return vec3(
        cos(phi) * sinTheta,
        sin(phi) * sinTheta,
        cosTheta);

#   undef madfrac
}

uint rand_xorshift(uint rngState)
{
    // Xorshift algorithm from George Marsaglia's paper
    rngState ^= (rngState << 13);
    rngState ^= (rngState >> 17);
    rngState ^= (rngState << 5);
    return rngState;
}

uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

mat3 randomOrientation()
{
	uint rngState = wang_hash(floatBitsToInt(uPushConsts.time));
	vec3 axis = normalize(vec3(rand_xorshift(rngState), rand_xorshift(rngState), rand_xorshift(rngState)) * (1.0 / 4294967296.0));
	float angle = rand_xorshift(rngState) * (1.0 / 4294967296.0) * 2.0 * PI;

	mat3 m;
	float c = cos(angle);
	float s = sin(angle);
	float oneMinusCos = 1.0 - c;
	float x2 = axis.x * axis.x;
	float y2 = axis.y * axis.y;
	float z2 = axis.z * axis.z;
	float xym = axis.x * axis.y * oneMinusCos;
	float xzm = axis.x * axis.z * oneMinusCos;
	float yzm = axis.y * axis.z * oneMinusCos;
	float xSin = axis.x * s;
	float ySin = axis.y * s;
	float zSin = axis.z * s;

	m[0][0] = x2 * oneMinusCos + c;
	m[0][1] = xym - zSin;
	m[0][2] = xzm + ySin;

	m[1][0] = xym + zSin;
	m[1][1] = y2 * oneMinusCos + c;
	m[1][2] = yzm - xSin;

	m[2][0] = xzm - ySin;
	m[2][1] = yzm + xSin;
	m[2][2] = z2 * oneMinusCos + c;

	return m;
}

void main() 
{
	const ivec3 gridSize = ivec3(cGridWidth, cGridHeight, cGridDepth);
	const ivec3 voxelGridSize = ivec3(cVoxelGridWidth, cVoxelGridHeight, cVoxelGridDepth);
	
	// get cell index and cascade index
	uint cellIndex = uQueue[gl_WorkGroupID.x];
	const uint cascade = cellIndex / (cGridWidth * cGridHeight * cGridDepth);
	cellIndex -= cascade * (cGridWidth * cGridHeight * cGridDepth);
	
	// get cell coordinate
	ivec3 cellCoord;
	cellCoord.y = int(cellIndex / (gridSize.x * gridSize.z));
	cellCoord.x = int(cellIndex % gridSize.x);
	cellCoord.z = int((cellIndex - cellCoord.y * (gridSize.x * gridSize.z)) / gridSize.x);
	
	ivec3 gridOffset = ivec3(round(uPushConsts.cameraPosition.xyz * (cGridBaseScale / (1 << cascade)))) - gridSize / 2;
	const vec3 worldSpacePos = vec3(cellCoord + gridOffset) / (cGridBaseScale / (1 << cascade));
	
	const vec3 dir = randomOrientation() * sphericalFibonacci(float(gl_LocalInvocationID.x), IRRADIANCE_VOLUME_RAY_MARCHING_RAY_COUNT);
	vec3 rayHitColor = vec3(0.18);
	
	uint currentCascade = cascade;
	
	// grid space
	gridOffset = ivec3(round(uPushConsts.cameraPosition.xyz * (cVoxelGridBaseScale / (1 << cascade)))) - voxelGridSize / 2;
	vec3 gridCoord = round((worldSpacePos + dir * 0.12) * (cVoxelGridBaseScale / (1 << cascade)));
	
	const vec3 gridStep = sign(dir);
	const vec3 corner = max(gridStep, vec3(0.0));
	const vec3 invVoxelGridSize = 1.0 / vec3(voxelGridSize);
	
	// ray space
	const vec3 inv = 1.0 / dir;
	vec3 ratio = (gridCoord + corner - gridCoord) * inv;
	const vec3 ratioStep = gridStep * inv;

	const int maxSteps = 344;
	int curStep = 0;
	float hitDistance = 0.0;
	const float maxDistance = 4.0;
	// dda
	while (curStep <= maxSteps) 
	{
		// ray is outside of cascade
		if (any(lessThan(gridCoord, gridOffset)) || any(greaterThanEqual(gridCoord, voxelGridSize + gridOffset)))
		{
			// ray is outside all cascades -> sample sky color
			if (currentCascade == (cVoxelCascades - 1))
			{
				rayHitColor = vec3(0.529, 0.808, 0.922);
				hitDistance = maxDistance;
				break;
			}
			else
			{
				// go to next cascade
				vec3 wsPos = vec3(gridCoord) / (cVoxelGridBaseScale / (1 << currentCascade));
				++currentCascade;
				gridOffset = ivec3(round(uPushConsts.cameraPosition.xyz * (cVoxelGridBaseScale / (1 << currentCascade)))) - voxelGridSize / 2;
				gridCoord = round(wsPos * (cVoxelGridBaseScale / (1 << currentCascade)));
			}
		}
		
		ivec3 coord = ivec3(fract(gridCoord * invVoxelGridSize) * voxelGridSize);
		// cascades are stacked on top of each other inside the same image
		coord += ivec3(0, currentCascade * cVoxelGridHeight, 0);
		// z and y axis are switched in order to "grow" the image along the z axis with each additional cascade
		coord = coord.xzy;
		
		if (texelFetch(uOpacityImage, coord, 0).x > 0.0)
		{
			vec3 wsPos = vec3(gridCoord) / (cVoxelGridBaseScale / (1 << currentCascade));
			hitDistance = min(maxDistance, distance(wsPos, worldSpacePos));
			rayHitColor = texelFetch(uVoxelImage, coord, 0).xyz;
			break;
		}
	
		const ivec3 mask = ivec3(lessThanEqual(ratio.xyz, min(ratio.yzx, ratio.zxy)));
		gridCoord += gridStep  * mask;		
		ratio += ratioStep * mask;
		++curStep;
	}
	
	imageStore(uResultImage, ivec2(gl_LocalInvocationID.x, gl_WorkGroupID.x), vec4(rayHitColor, 1.0));
	imageStore(uDistanceImage, ivec2(gl_LocalInvocationID.x, gl_WorkGroupID.x), vec4(hitDistance));
}