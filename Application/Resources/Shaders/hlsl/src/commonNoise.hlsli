#ifndef COMMON_NOISE_H
#define COMMON_NOISE_H

// permutation table
static int permutation[] = 
{
	99,
	72,
	63,
	153,
	222,
	120,
	213,
	110,
	139,
	125,
	42,
	113,
	28,
	46,
	137,
	205,
	233,
	203,
	35,
	238,
	67,
	19,
	51,
	36,
	30,
	177,
	242,
	39,
	48,
	185,
	55,
	214,
	57,
	212,
	126,
	210,
	146,
	198,
	164,
	127,
	254,
	131,
	206,
	236,
	53,
	160,
	122,
	247,
	56,
	194,
	92,
	21,
	175,
	209,
	195,
	219,
	239,
	200,
	143,
	77,
	234,
	181,
	44,
	95,
	25,
	29,
	231,
	83,
	79,
	108,
	7,
	168,
	132,
	124,
	172,
	140,
	24,
	40,
	189,
	152,
	82,
	65,
	186,
	112,
	250,
	149,
	0,
	78,
	49,
	161,
	130,
	163,
	173,
	123,
	117,
	3,
	111,
	52,
	136,
	225,
	11,
	102,
	129,
	159,
	211,
	232,
	101,
	33,
	165,
	182,
	135,
	70,
	50,
	150,
	96,
	66,
	249,
	180,
	89,
	156,
	26,
	115,
	18,
	169,
	60,
	251,
	59,
	208,
	93,
	45,
	141,
	167,
	190,
	90,
	97,
	88,
	218,
	76,
	243,
	191,
	10,
	235,
	37,
	119,
	85,
	32,
	54,
	142,
	192,
	62,
	109,
	98,
	193,
	197,
	68,
	15,
	170,
	106,
	224,
	174,
	104,
	151,
	196,
	147,
	114,
	121,
	86,
	71,
	145,
	246,
	47,
	94,
	178,
	176,
	14,
	5,
	228,
	148,
	13,
	201,
	87,
	184,
	217,
	105,
	216,
	16,
	103,
	27,
	69,
	240,
	227,
	64,
	12,
	80,
	100,
	133,
	162,
	230,
	20,
	171,
	4,
	91,
	74,
	255,
	6,
	43,
	253,
	1,
	61,
	204,
	75,
	248,
	22,
	128,
	9,
	144,
	188,
	23,
	252,
	73,
	116,
	237,
	202,
	34,
	134,
	118,
	17,
	166,
	138,
	183,
	207,
	241,
	2,
	187,
	245,
	199,
	226,
	58,
	179,
	31,
	223,
	158,
	38,
	155,
	244,
	215,
	154,
	107,
	221,
	8,
	41,
	220,
	84,
	81,
	229,
	157,
};

//float4 GeneratePermTexture(float p : POSITION) : COLOR
//{
//	return permutation[p * 256] / 255.0;
//}

 // gradients for 3D noise
static float3 g[] = 
{
	float3(1,1,0),
	float3(-1,1,0),
	float3(1,-1,0),
	float3(-1,-1,0),
	float3(1,0,1),
	float3(-1,0,1),
	float3(1,0,-1),
	float3(-1,0,-1),
	float3(0,1,1),
	float3(0,-1,1),
	float3(0,1,-1),
	float3(0,-1,-1),
	float3(1,1,0),
	float3(0,-1,1),
	float3(-1,1,0),
	float3(0,-1,-1),
}; 

//float3 GenerateGradTexture(float p : POSITION) : COLOR
//{
//	return g[p * 16];
//}

float3 fade(float3 t)
{
	return t * t * t * (t * (t * 6 - 15) + 10); // new curve  
	//  return t * t * (3 - 2 * t); // old curve  
}

float perm(float x)
{
	return permutation[(int)x % 256];// tex1D(permSampler, x / 256.0) * 256;
}

float grad(float x, float3 p)
{
	return dot(g[(int)x % 16], p);//dot(tex1D(gradSampler, x), p);
}

// 3D version
float perlinNoise(float3 p)
{
	float3 P = fmod(floor(p), 256.0);
	p -= floor(p);
	float3 f = fade(p);
	// HASH COORDINATES FOR 6 OF THE 8 CUBE CORNERS
	float A = perm(P.x) + P.y;
	float AA = perm(A) + P.z;
	float AB = perm(A + 1) + P.z;
	float B =  perm(P.x + 1) + P.y;
	float BA = perm(B) + P.z;
	float BB = perm(B + 1) + P.z;
	// AND ADD BLENDED RESULTS FROM 8 CORNERS OF CUBE
	return lerp(
				lerp(
					lerp(grad(perm(AA), p), grad(perm(BA), p + float3(-1, 0, 0)), f.x), 
					lerp(grad(perm(AB), p + float3(0, -1, 0)),
					grad(perm(BB), p + float3(-1, -1, 0)), f.x), f.y),
				lerp(
					lerp(grad(perm(AA + 1), p + float3(0, 0, -1)), grad(perm(BA + 1), p + float3(-1, 0, -1)), f.x),
					lerp(grad(perm(AB + 1), p + float3(0, -1, -1)),
					grad(perm(BB + 1), p + float3(-1, -1, -1)), f.x), f.y),
				f.z);
}

#endif // COMMON_NOISE_H