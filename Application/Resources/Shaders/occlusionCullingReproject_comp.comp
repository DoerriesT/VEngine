#version 450

#include "occlusionCullingReproject_bindings.h"

layout(set = DEPTH_IMAGE_SET, binding = DEPTH_IMAGE_BINDING) uniform sampler2D uDepthImage;
layout(set = RESULT_IMAGE_SET, binding = RESULT_IMAGE_BINDING, r32ui) uniform uimage2D uResultImage;

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout(constant_id = WIDTH_CONST_ID) const uint cWidth = 1600;
layout(constant_id = HEIGHT_CONST_ID) const uint cHeight = 900;
layout(constant_id = TEXEL_WIDTH_CONST_ID) const float cTexelWidth = 1.0 / 1600.0;
layout(constant_id = TEXEL_HEIGHT_CONST_ID) const float cTexelHeight = 1.0 / 900;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main() 
{
	if ((gl_GlobalInvocationID.x < (cWidth / 4)) && (gl_GlobalInvocationID.y < (cHeight / 4)))
	{
		const vec2 texCoords = (vec2(gl_GlobalInvocationID.xy) + 0.5) * vec2(cTexelWidth, cTexelHeight) * 4;
	
		// downsample depth
		vec4 depthValues00 = textureGather(uDepthImage, texCoords + vec2(-cTexelWidth, -cTexelHeight));
		float depth = min(min(depthValues00.x, depthValues00.y), min(depthValues00.z, depthValues00.w));
		vec4 depthValues10 = textureGather(uDepthImage, texCoords + vec2(cTexelWidth, -cTexelHeight));
		depth = min(min(depthValues10.x, depthValues10.y), min(depthValues10.z, depthValues10.w));
		vec4 depthValues01 = textureGather(uDepthImage, texCoords + vec2(-cTexelWidth, cTexelHeight));
		depth = min(min(depthValues01.x, depthValues01.y), min(depthValues01.z, depthValues01.w));
		vec4 depthValues11 = textureGather(uDepthImage, texCoords + vec2(cTexelWidth, cTexelHeight));
		depth = min(min(depthValues11.x, depthValues11.y), min(depthValues11.z, depthValues11.w));
	
		// project into current frame
		vec4 position = uPushConsts.prevToCurProjection * vec4(texCoords * 2.0 - 1.0, depth, 1.0);
		position.xyz *= 1.0 / position.w;
		position.xy = position.xy * 0.5 + 0.5;
		const ivec2 outputPos = ivec2(clamp(position.xy, vec2(0.0), vec2(1.0)) * vec2(cWidth, cHeight) * 0.25);
	
		// prevent large depth values behind camera
		const float depthF = (position.w < 0.0) ? depth : position.z;
		
		// convert to uint for atomic max operation. since bound color buffer
		// is initialized to zero, first invert
		const uint invDepth = floatBitsToUint(clamp(1.0 - depthF, 0.0, 1.0));
		
		// write depth to new location
		imageAtomicMax(uResultImage, outputPos, invDepth);
		
		// write depth to current location to handle holes from reprojection
		imageAtomicMax(uResultImage, ivec2(gl_GlobalInvocationID.xy), invDepth);
	}
}