#version 450

#include "occlusionCullingHiZ_bindings.h"

struct BoundingBox
{
	float data[6];
};

layout(set = INSTANCE_DATA_SET, binding = INSTANCE_DATA_BINDING) readonly buffer INSTANCE_DATA 
{
    SubMeshInstanceData uInstanceData[];
};

layout(set = AABB_DATA_SET, binding = AABB_DATA_BINDING) readonly buffer AABB_DATA 
{
    BoundingBox uBoundingBoxes[];
};

layout(set = TRANSFORM_DATA_SET, binding = TRANSFORM_DATA_BINDING) readonly buffer TRANSFORM_DATA 
{
    mat4 uTransformData[];
};

layout(set = VISIBILITY_BUFFER_SET, binding = VISIBILITY_BUFFER_BINDING) buffer VISIBILITY_BUFFER 
{
    uint uVisibilityBuffer[];
};

layout(set = HIZ_IMAGE_SET, binding = HIZ_IMAGE_BINDING) uniform sampler2D uHizImage;

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};


layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;


void main() 
{
	uint instanceIndex = gl_GlobalInvocationID.x;
	if (instanceIndex < uPushConsts.instanceCount)
	{
		instanceIndex += uPushConsts.instanceOffset;
		const SubMeshInstanceData instanceData = uInstanceData[instanceIndex];
		const BoundingBox boundingBox = uBoundingBoxes[instanceData.subMeshIndex];
		const mat4 transform = uPushConsts.jitteredViewProjectionMatrix * uTransformData[instanceData.transformIndex];
		
		vec4 sBox = vec4(vec2(9999.0), vec2(-9999.0));
		float maxDepth = -9999.0;
		for (uint i = 0; i < 8; ++i)
		{
			vec4 position = vec4(((i & 0x4) == 0) ? boundingBox.data[0] : boundingBox.data[3],
								((i & 0x2) == 0) ? boundingBox.data[1] : boundingBox.data[4],
								((i & 0x1) == 0) ? boundingBox.data[2] : boundingBox.data[5],
								1.0);
			position = transform * position;
			const bool behindNearPlane = (abs(position.z) > position.w) || (position.z < 0.0);
			position.xyz /= position.w;
			position.xy = position.xy * 0.5 + 0.5;
			sBox.xy = min(sBox.xy, position.xy);
			sBox.zw = max(sBox.zw, position.xy);
			maxDepth = max(maxDepth, behindNearPlane ? 1.0 : position.z);
		}
		
		bool visible = false;
		vec2 size = ceil(vec2(sBox.zw - sBox.xy) * uPushConsts.resolution);
		float level = clamp(ceil(log2(max(size.x, size.y) * 0.5)), 0.0, 11.0);
		vec4 samples;
		samples[0] = textureLod(uHizImage, clamp(vec2(sBox.xy), 0.0.xx, 1.0.xx), level).x;
		samples[1] = textureLod(uHizImage, clamp(vec2(sBox.zy), 0.0.xx, 1.0.xx), level).x;
		samples[2] = textureLod(uHizImage, clamp(vec2(sBox.xw), 0.0.xx, 1.0.xx), level).x;
		samples[3] = textureLod(uHizImage, clamp(vec2(sBox.zw), 0.0.xx, 1.0.xx), level).x;
		float hiZDepth = min(min(samples.x, samples.y), min(samples.z, samples.w));
		
		visible = maxDepth >= hiZDepth;
		
		uVisibilityBuffer[instanceIndex] = visible ? 1 : 0;
	}
}