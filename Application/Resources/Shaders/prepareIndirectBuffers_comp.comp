#version 450

#include "prepareIndirectBuffers_bindings.h"

layout(set = INSTANCE_DATA_SET, binding = INSTANCE_DATA_BINDING) readonly buffer INSTANCE_DATA 
{
    SubMeshInstanceData uInstanceData[];
};

layout(set = SUB_MESH_DATA_SET, binding = SUB_MESH_DATA_BINDING) readonly buffer SUB_MESH_DATA 
{
    SubMeshData uSubMeshData[];
};

layout(set = OPAQUE_INDIRECT_BUFFER_SET, binding = OPAQUE_INDIRECT_BUFFER_BINDING) buffer OPAQUE_INDIRECT_BUFFER 
{
    DrawIndexedIndirectCommand uOpaqueIndirectCommands[];
};

layout(set = MASKED_INDIRECT_BUFFER_SET, binding = MASKED_INDIRECT_BUFFER_BINDING) buffer MASKED_INDIRECT_BUFFER 
{
    DrawIndexedIndirectCommand uMaskedIndirectCommands[];
};

layout(set = TRANSPARENT_INDIRECT_BUFFER_SET, binding = TRANSPARENT_INDIRECT_BUFFER_BINDING) buffer TRANSPARENT_INDIRECT_BUFFER 
{
    DrawIndexedIndirectCommand uTransparentIndirectCommands[];
};

layout(set = OPAQUE_SHADOW_INDIRECT_BUFFER_SET, binding = OPAQUE_SHADOW_INDIRECT_BUFFER_BINDING) buffer OPAQUE_SHADOW_INDIRECT_BUFFER 
{
    DrawIndexedIndirectCommand uOpaqueShadowIndirectCommands[];
};

layout(set = MASKED_SHADOW_INDIRECT_BUFFER_SET, binding = MASKED_SHADOW_INDIRECT_BUFFER_BINDING) buffer MASKED_SHADOW_INDIRECT_BUFFER 
{
    DrawIndexedIndirectCommand uMaskedShadowIndirectCommands[];
};

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main() 
{
	uint index = gl_GlobalInvocationID.x;
	
	if (index >= uPushConsts.opaqueCount + uPushConsts.maskedCount + uPushConsts.transparentCount + uPushConsts.opaqueShadowCount + uPushConsts.maskedShadowCount)
	{
		return;
	}
	
	SubMeshData subMeshData = uSubMeshData[uInstanceData[index].subMeshIndex];
	
	DrawIndexedIndirectCommand cmd;
	cmd.indexCount = subMeshData.indexCount;
	cmd.instanceCount = 1;
	cmd.firstIndex = subMeshData.firstIndex;
	cmd.vertexOffset = subMeshData.vertexOffset;
	cmd.firstInstance = index;
	
	const uint opaqueCmdBegin = 0;
	const uint maskedCmdBegin = uPushConsts.opaqueCount;
	const uint transparentCmdBegin = maskedCmdBegin + uPushConsts.maskedCount;
	const uint opaqueShadowCmdBegin = transparentCmdBegin + uPushConsts.transparentCount;
	const uint maskedShadowCmdBegin = opaqueShadowCmdBegin + uPushConsts.opaqueShadowCount;
	
	if (index < (opaqueCmdBegin + uPushConsts.opaqueCount))
	{
		uOpaqueIndirectCommands[index - opaqueCmdBegin] = cmd;
	}
	else if (index < (maskedCmdBegin + uPushConsts.maskedCount))
	{
		uMaskedIndirectCommands[index - maskedCmdBegin] = cmd;
	}
	else if (index < (transparentCmdBegin + uPushConsts.transparentCount))
	{
		uTransparentIndirectCommands[index - transparentCmdBegin] = cmd;
	}
	else if (index < (opaqueShadowCmdBegin + uPushConsts.opaqueShadowCount))
	{
		uOpaqueShadowIndirectCommands[index - opaqueShadowCmdBegin] = cmd;
	}
	else if (index < (maskedShadowCmdBegin + uPushConsts.maskedShadowCount))
	{
		uMaskedShadowIndirectCommands[index - maskedShadowCmdBegin] = cmd;
	}
}