#version 450

#include "deferredShadows_bindings.h"

layout(set = RESULT_IMAGE_SET, binding = RESULT_IMAGE_BINDING, r8) uniform writeonly image2D uResultImage;
layout(set = DEPTH_IMAGE_SET, binding = DEPTH_IMAGE_BINDING) uniform texture2D uDepthImage;
layout(set = TANGENT_SPACE_IMAGE_SET, binding = TANGENT_SPACE_IMAGE_BINDING) uniform utexture2D uTangentSpaceImage;
layout(set = SHADOW_IMAGE_SET, binding = SHADOW_IMAGE_BINDING) uniform texture2DArray uShadowImage;
layout(set = SHADOW_SAMPLER_SET, binding = SHADOW_SAMPLER_BINDING) uniform samplerShadow uShadowSampler;
layout(set = POINT_SAMPLER_SET, binding = POINT_SAMPLER_BINDING) uniform sampler uPointSampler;

layout(set = SHADOW_MATRICES_SET, binding = SHADOW_MATRICES_BINDING) readonly buffer SHADOW_MATRICES
{
	mat4 uShadowMatrices[];
};

layout(set = CASCADE_PARAMS_BUFFER_SET, binding = CASCADE_PARAMS_BUFFER_BINDING) readonly buffer CASCADE_PARAMS_BUFFER
{
	vec4 uCascadeParams[]; // X: depth bias Y: normal bias Z: texelsPerMeter
};

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(constant_id = WIDTH_CONST_ID) const uint cWidth = 1600;
layout(constant_id = HEIGHT_CONST_ID) const uint cHeight = 900;
layout(constant_id = TEXEL_WIDTH_CONST_ID) const float cTexelWidth = 1.0 / 1600.0;
layout(constant_id = TEXEL_HEIGHT_CONST_ID) const float cTexelHeight = 1.0 / 900;

float interleavedGradientNoise(vec2 v)
{
	vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);
	return fract(magic.z * dot(v, magic.xy));
}

vec2 vogelDiskSample(uint sampleIndex, uint samplesCount, float phi)
{
	const float goldenAngle = 2.4;
	const float r = sqrt(sampleIndex + 0.5) / sqrt(samplesCount);
	const float theta = sampleIndex * goldenAngle + phi;

	return vec2(cos(theta), sin(theta)) * r;
}

float avgBlockersDepthToPenumbra(float zShadowMapView, float avgBlockersDepth)
{
	float penumbra = (zShadowMapView - avgBlockersDepth) / avgBlockersDepth;
	penumbra *= penumbra;
	return clamp(4000.0 * penumbra, 0.0, 1.0);
}

float penumbra(float noise, vec3 shadowCoord, int samplesCount, float layer)
{
	float avgBlockersDepth = 0.0;
	float blockersCount = 0.0;
	
	for (int i = 0; i < samplesCount; ++i)
	{
		const float penumbraFilterMaxSize = 7.0 * (1.0 / 2048.0);
		vec2 sampleCoord = vogelDiskSample(i, samplesCount, noise);
		sampleCoord = shadowCoord.xy + penumbraFilterMaxSize * sampleCoord;
		
		float sampleDepth = texture(sampler2DArray(uShadowImage, uPointSampler), vec3(sampleCoord, layer)).x;
	
		if (sampleDepth < shadowCoord.z)
		{
			avgBlockersDepth += sampleDepth;
			blockersCount += 1.0;
		}
	}
	
	if (blockersCount > 0.0)
	{
		avgBlockersDepth /= blockersCount;
		return avgBlockersDepthToPenumbra(shadowCoord.z, avgBlockersDepth);
	}
	else
	{
		return 0.0;
	}
}

float signNotZero(in float k) 
{
    return k >= 0.0 ? 1.0 : -1.0;
}

vec2 signNotZero(in vec2 v) 
{
    return vec2( signNotZero(v.x), signNotZero(v.y) );
}

vec3 decodeNormal(in vec2 enc) 
{
    vec3 v = vec3(enc.x, enc.y, 1.0 - abs(enc.x) - abs(enc.y));
    if (v.z < 0) 
	{
        v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);
    }
    return normalize(v);
}

vec3 minDiff(vec3 P, vec3 Pr, vec3 Pl)
{
    vec3 V1 = Pr - P;
    vec3 V2 = P - Pl;
    return (dot(V1, V1) < dot(V2, V2)) ? V1 : V2;
}

vec3 getViewSpacePosDepth(vec2 texelCoord, float depth)
{
	const vec2 clipSpacePosition = texelCoord * vec2(cTexelWidth, cTexelHeight) * 2.0 - 1.0;
	vec4 viewSpacePosition = vec4(uPushConsts.unprojectParams.xy * clipSpacePosition, -1.0, uPushConsts.unprojectParams.z * depth + uPushConsts.unprojectParams.w);
	return viewSpacePosition.xyz / viewSpacePosition.w;
}

vec3 getViewSpacePos(vec2 texelCoord)
{
	return getViewSpacePosDepth(texelCoord, texelFetch(sampler2D(uDepthImage, uPointSampler), ivec2(texelCoord), 0).x);
}

void main() 
{
	if (gl_GlobalInvocationID.x >= cWidth || gl_GlobalInvocationID.y >=  cHeight)
	{
		return;
	}
	const float depth = texelFetch(sampler2D(uDepthImage, uPointSampler), ivec2(gl_GlobalInvocationID.xy), 0).x;
	if (depth == 0.0)
	{
		imageStore(uResultImage, ivec2(gl_GlobalInvocationID.xy), vec4(0.0));
		return;
	}
	
	const vec2 clipSpacePosition = vec2(gl_GlobalInvocationID.xy + 0.5) * vec2(cTexelWidth, cTexelHeight) * 2.0 - 1.0;
	vec4 viewSpacePosition = vec4(uPushConsts.unprojectParams.xy * clipSpacePosition, -1.0, uPushConsts.unprojectParams.z * depth + uPushConsts.unprojectParams.w);
	vec3 P = viewSpacePosition.xyz / viewSpacePosition.w;
	
	// Sample neighboring pixels
	const vec3 Pr = getViewSpacePos(vec2(gl_GlobalInvocationID.xy) + vec2(0.5) + vec2(1.0, 0.0));
	const vec3 Pl = getViewSpacePos(vec2(gl_GlobalInvocationID.xy) + vec2(0.5) + vec2(-1.0, 0.0));
	const vec3 Pb = getViewSpacePos(vec2(gl_GlobalInvocationID.xy) + vec2(0.5) + vec2(0.0, 1.0));
	const vec3 Pt = getViewSpacePos(vec2(gl_GlobalInvocationID.xy) + vec2(0.5) + vec2(0.0, -1.0));
	
	// Calculate tangent basis vectors using the minimum difference
	const vec3 dPdu = minDiff(P, Pr, Pl);
	const vec3 dPdv = minDiff(P, Pt, Pb);
		
		//const uvec2 encodedTBN = texelFetch(usampler2D(uTangentSpaceImage,  uPointSampler), ivec2(gl_GlobalInvocationID.xy), 0).xy;
	const vec3 viewSpaceNormal = normalize(cross(dPdu, dPdv));
	
	//const uvec2 encodedTBN = texelFetch(usampler2D(uTangentSpaceImage, uPointSampler), ivec2(gl_GlobalInvocationID.xy), 0).xy;
	//const vec4 viewSpaceNormal = vec4(decodeNormal((encodedTBN.xy * (1.0 / 1023.0)) * 2.0 - 1.0), 0.0);
	const vec3 N = mat3(uPushConsts.invViewMatrix) * viewSpaceNormal;
	
	const float NdotL = dot(viewSpaceNormal.xyz, uPushConsts.direction.xyz);
		
	// skip backfacing fragments
	if (NdotL <= -0.05)
	{
		imageStore(uResultImage, ivec2(gl_GlobalInvocationID.xy), vec4(1.0));
		return;
	}
	
	const float scaleWeight = 1.0 - max(NdotL, 0.0);
	
	//const vec2 clipSpacePosition = vec2(gl_GlobalInvocationID.xy + 0.5) * vec2(cTexelWidth, cTexelHeight) * 2.0 - 1.0;
	//vec4 viewSpacePosition = vec4(uPushConsts.unprojectParams.xy * clipSpacePosition, -1.0, uPushConsts.unprojectParams.z * depth + uPushConsts.unprojectParams.w);
	vec4 worldSpacePos = uPushConsts.invViewMatrix * vec4(P, 1.0);
	worldSpacePos *= 1.0 / worldSpacePos.w;
	
	vec4 tc = vec4(-1.0);
	const int cascadeDataOffset = uPushConsts.cascadeDataOffset;
	const float maxFilterRadiusWorldSpace = 0.04;
	const float texelSize = 1.0 / float(textureSize(sampler2DArrayShadow(uShadowImage, uShadowSampler), 0).x);
	for (int i = uPushConsts.cascadeCount - 1; i >= 0; --i)
	{
		const float normalOffsetScale = uCascadeParams[cascadeDataOffset + i].y * scaleWeight;
		const vec4 shadowCoord = vec4((uShadowMatrices[cascadeDataOffset + i] * vec4(worldSpacePos.xyz + N * normalOffsetScale, 1.0)).xyz, cascadeDataOffset + i);
		const float border = maxFilterRadiusWorldSpace * uCascadeParams[cascadeDataOffset + i].z * texelSize;
		const bool valid = all(lessThan(abs(shadowCoord.xy), vec2(1.0 - border * 2.0)));
		tc = valid ? shadowCoord : tc;
	}
	
	tc.xy = tc.xy * 0.5 + 0.5;
	tc.z += uCascadeParams[int(tc.w)].x;
	//const float shadow = tc.w != -1.0 ? texture(sampler2DArrayShadow(uShadowImage, uShadowSampler), tc.xywz).x : 0.0;
	float shadow = 0.0;
	const float noise = interleavedGradientNoise(vec2(gl_GlobalInvocationID.xy) + 0.5) * 2.0 * 3.1415;
	const float filterScale = penumbra(noise, tc.xyz, 16, tc.w);
	const float maxFilterRadiusTexelSpace = maxFilterRadiusWorldSpace * uCascadeParams[int(tc.w)].z * texelSize;
	for (uint j = 0; j < 16; ++j)
	{
		const vec2 coord = filterScale * maxFilterRadiusTexelSpace * vogelDiskSample(j, 16, noise) + tc.xy;
		shadow += texture(sampler2DArrayShadow(uShadowImage, uShadowSampler), vec4(coord, tc.wz)).x * (1.0 / 16.0);
	}
	
	imageStore(uResultImage, ivec2(gl_GlobalInvocationID.xy), vec4(shadow));
}