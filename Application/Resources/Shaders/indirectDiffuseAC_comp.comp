#version 450

#ifndef SSAO_ENABLED
#define SSAO_ENABLED 0
#endif // SSAO_ENABLED

#include "indirectDiffuse_bindings.h"
#include "common.h"

layout(constant_id = WIDTH_CONST_ID) const uint cWidth = 1600;
layout(constant_id = HEIGHT_CONST_ID) const uint cHeight = 900;
layout(constant_id = TEXEL_WIDTH_CONST_ID) const float cTexelWidth = 1.0 / 1600.0;
layout(constant_id = TEXEL_HEIGHT_CONST_ID) const float cTexelHeight = 1.0 / 900;
layout(constant_id = IRRADIANCE_VOLUME_WIDTH_CONST_ID) const uint cGridWidth = 64;
layout(constant_id = IRRADIANCE_VOLUME_HEIGHT_CONST_ID) const uint cGridHeight = 32;
layout(constant_id = IRRADIANCE_VOLUME_DEPTH_CONST_ID) const uint cGridDepth = 64;
layout(constant_id = IRRADIANCE_VOLUME_CASCADES_CONST_ID) const uint cCascades = 3;
layout(constant_id = IRRADIANCE_VOLUME_BASE_SCALE_CONST_ID) const float cGridBaseScale = 2.0;

layout(set = RESULT_IMAGE_SET, binding = RESULT_IMAGE_BINDING, rgba16f) uniform image2D uResultImage;
layout(set = DEPTH_IMAGE_SET, binding = DEPTH_IMAGE_BINDING) uniform sampler2D uDepthImage;
layout(set = ALBEDO_IMAGE_SET, binding = ALBEDO_IMAGE_BINDING) uniform sampler2D uAlbedoImage;
layout(set = NORMAL_IMAGE_SET, binding = NORMAL_IMAGE_BINDING) uniform sampler2D uNormalImage;
layout(set = IRRADIANCE_VOLUME_IMAGE_SET, binding = IRRADIANCE_VOLUME_IMAGE_BINDING) uniform sampler3D uIrradianceVolumeImages[3];
#if SSAO_ENABLED
layout(set = OCCLUSION_IMAGE_SET, binding = OCCLUSION_IMAGE_BINDING) uniform sampler2D uOcclusionImage;
#endif // SSAO_ENABLED

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;


vec3 accurateSRGBToLinear(in vec3 sRGBCol)
{
	vec3 linearRGBLo = sRGBCol * (1.0 / 12.92);
	vec3 linearRGBHi = pow((sRGBCol + vec3(0.055)) * vec3(1.0 / 1.055), vec3(2.4));
	vec3 linearRGB = mix(linearRGBLo, linearRGBHi, vec3(greaterThan(sRGBCol, vec3(0.04045))));
	return linearRGB;
}


vec3 sampleAmbientCube(vec3 N, vec3 tc, uint cascadeIndex)
{
	vec3 nSquared = N * N;
	vec3 isNegative = mix(vec3(0.0), vec3(0.5), lessThan(N, vec3(0.0)));
	tc = tc.xzy;
	tc.z *= 0.5;
	vec3 tcz = tc.zzz + isNegative;
	tcz = tcz * (1.0 / cCascades) + float(cascadeIndex) / cCascades;
	
	return nSquared.x * textureLod(uIrradianceVolumeImages[0], vec3(tc.xy, tcz.x), 0).rgb +
			nSquared.y * textureLod(uIrradianceVolumeImages[1], vec3(tc.xy, tcz.y), 0).rgb +
			nSquared.z * textureLod(uIrradianceVolumeImages[2], vec3(tc.xy, tcz.z), 0).rgb;
}

float square(float v)
{
	return v * v;
}

vec3 sampleAmbientCubeCascade(vec3 worldSpacePos, vec3 worldSpaceNormal, uint cascadeIndex)
{
	vec4 sum = vec4(0.0);
	for (int i = 0; i < 8; ++i)
	{
		vec3 pointGridCoord = worldSpacePos * (cGridBaseScale / (1 << cascadeIndex));
		vec3 probeGridCoord = floor(pointGridCoord) + (ivec3(i, i >> 1, i >> 2) & ivec3(1));
		vec3 trilinear =  1.0 - abs(probeGridCoord - pointGridCoord);
		float weight = 1.0;
		
		const vec3 trueDirToProbe = probeGridCoord - pointGridCoord;
		const bool probeInPoint = dot(trueDirToProbe, trueDirToProbe) < 1e-6;
		
		// smooth backface test
		{
			weight *= probeInPoint ? 1.0 : square(max(0.0001, (dot(normalize(trueDirToProbe), worldSpaceNormal) + 1.0) * 0.5)) + 0.2;
		}
		
		// avoid zero weight
		weight = max(0.000001, weight);
		
		const float crushThreshold = 0.2;
		if (weight < crushThreshold)
		{
			weight *= weight * weight * (1.0 / square(crushThreshold));
		}
		
		// trilinear
		weight *= trilinear.x * trilinear.y * trilinear.z;
		
		vec3 probeIrradiance = sampleAmbientCube(worldSpaceNormal, fract(probeGridCoord / vec3(cGridWidth, cGridHeight, cGridDepth)), cascadeIndex);
		
		probeIrradiance = sqrt(probeIrradiance);
		
		sum += vec4(probeIrradiance * weight, weight);
	}
	vec3 irradiance = sum.xyz / sum.w;
	
	return irradiance * irradiance;
}

vec3 sampleAmbientCubeVolume(vec3 viewSpacePos, vec3 viewSpaceNormal)
{
	mat4 invViewMatrix = transpose(mat4(uPushConsts.invViewMatrixRow0, uPushConsts.invViewMatrixRow1, uPushConsts.invViewMatrixRow2, vec4(0.0, 0.0, 0.0, 1.0)));
	vec4 worldSpacePos4 = invViewMatrix * vec4(viewSpacePos, 1.0);
	vec3 worldSpacePos = worldSpacePos4.xyz / worldSpacePos4.w;
	vec3 worldSpaceNormal = (invViewMatrix * vec4(viewSpaceNormal, 0.0)).xyz;
	const ivec3 gridSize = ivec3(cGridWidth, cGridHeight, cGridDepth);
	float currentGridScale = cGridBaseScale;
	uint cascadeIndex = 0;
	
	// search for cascade index
	for (; cascadeIndex < cCascades; ++cascadeIndex)
	{
		// calculate coordinate in world space fixed coordinate system (scaled to voxel size)
		ivec3 coord = ivec3(worldSpacePos * currentGridScale);
		ivec3 offset = ivec3(round(vec3(invViewMatrix[3]) * currentGridScale) - (gridSize / 2));

		// if coordinate is inside grid, we found the correct cascade
		if (all(greaterThanEqual(coord, offset)) && all(lessThan(coord, gridSize + offset - 1)))
		{
			break;
		}
		currentGridScale *= 0.5;
	}
	
	// if cascade was found, calculate diffuse indirect light
	if (cascadeIndex < cCascades)
	{
		return sampleAmbientCubeCascade(worldSpacePos, worldSpaceNormal, cascadeIndex);
	}
	else
	{
		return vec3(0.18);
	}
}

void main() 
{
	if (gl_GlobalInvocationID.x >= cWidth || gl_GlobalInvocationID.y >= cHeight)
	{
		return;
	}
	const float depth = texelFetch(uDepthImage, ivec2(gl_GlobalInvocationID.xy), 0).x;
	
	if (depth == 0.0)
	{
		return;
	}

	// view space position
	const vec4 clipSpacePosition = vec4(vec2(gl_GlobalInvocationID.xy + 0.5) * vec2(cTexelWidth, cTexelHeight)  * 2.0 - 1.0, depth, 1.0);
	vec4 viewSpacePosition4 = uPushConsts.invJitteredProjectionMatrix * clipSpacePosition;
	const vec3 viewSpacePos = viewSpacePosition4.xyz / viewSpacePosition4.w;
	const vec3 N = texelFetch(uNormalImage, ivec2(gl_GlobalInvocationID.xy), 0).xyz;
	
	vec3 irradiance = sampleAmbientCubeVolume(viewSpacePos, N) * (1.0 / PI);
	irradiance *= accurateSRGBToLinear(texelFetch(uAlbedoImage, ivec2(gl_GlobalInvocationID.xy), 0).rgb);
#if SSAO_ENABLED
	irradiance *=  texelFetch(uOcclusionImage, ivec2(gl_GlobalInvocationID.xy), 0).x;
#endif // SSAO_ENABLED
	
	const vec3 lit = imageLoad(uResultImage, ivec2(gl_GlobalInvocationID.xy)).rgb;
	imageStore(uResultImage, ivec2(gl_GlobalInvocationID.xy), vec4(irradiance + lit, 1.0));
}