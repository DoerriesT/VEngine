#version 450

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable

#include "buildIndexBuffer_bindings.h"

struct ClusterInfo
{
	uint indexCount;
	uint indexOffset;
	int vertexOffset;
	uint drawCallIndex;
	uint transformIndex;
};

struct DrawIndexedIndirectCommand 
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout(set = CLUSTER_INFO_SET, binding = CLUSTER_INFO_BINDING) readonly buffer CLUSTER_INFO 
{
    ClusterInfo uClusterInfo[];
};

layout(set = INPUT_INDICES_SET, binding = INPUT_INDICES_BINDING) readonly buffer INPUT_INDICES 
{
    uint uInputIndices[];
};

layout(set = DRAW_COMMAND_SET, binding = DRAW_COMMAND_BINDING) buffer DRAW_COMMAND 
{
    DrawIndexedIndirectCommand uCmd;
};

layout(set = FILTERED_INDICES_SET, binding = FILTERED_INDICES_BINDING) buffer FILTERED_INDICES 
{
    uint uFilteredIndices[];
};

layout(set = TRANSFORM_DATA_SET, binding = TRANSFORM_DATA_BINDING) readonly buffer TRANSFORM_DATA 
{
    mat4 uTransformData[];
};

layout(set = POSITIONS_SET, binding = POSITIONS_BINDING) readonly buffer POSITIONS 
{
    float uPositions[];
};

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

#include "commonTriangleFilter.h"

shared uint workGroupOutputSlot;
shared uint subgroupIndexCounts[8]; // assuming minimum subgroup size of 32 and workgroup size of 256

void main() 
{
	ClusterInfo clusterInfo = uClusterInfo[uPushConsts.clusterOffset + gl_WorkGroupID.x];
	uint indices[3];
	bool cull = gl_LocalInvocationID.x * 3 >= clusterInfo.indexCount;
	if (!cull)
	{
		
		uint indexBaseOffset = clusterInfo.indexOffset + gl_LocalInvocationID.x * 3;
		bool lower = (indexBaseOffset & 1) == 0;
		indexBaseOffset /= 2;
		uint indices16[2];
		indices16[0] = uInputIndices[indexBaseOffset + 0];
		indices16[1] = uInputIndices[indexBaseOffset + 1];
		
		indices[0] = lower ? (indices16[0] & 0xFFFF) : (indices16[0] >> 16);
		indices[1] = lower ? (indices16[0] >> 16) : (indices16[1] & 0xFFFF);
		indices[2] = lower ? (indices16[1] & 0xFFFF) : (indices16[1] >> 16);
		
		vec4 vertices[3];
		vertices[0].x = uPositions[(indices[0] + clusterInfo.vertexOffset) * 3 + 0];
		vertices[0].y = uPositions[(indices[0] + clusterInfo.vertexOffset) * 3 + 1];
		vertices[0].z = uPositions[(indices[0] + clusterInfo.vertexOffset) * 3 + 2];
		vertices[0].w = 1.0;
		vertices[1].x = uPositions[(indices[1] + clusterInfo.vertexOffset) * 3 + 0];
		vertices[1].y = uPositions[(indices[1] + clusterInfo.vertexOffset) * 3 + 1];
		vertices[1].z = uPositions[(indices[1] + clusterInfo.vertexOffset) * 3 + 2];
		vertices[1].w = 1.0;
		vertices[2].x = uPositions[(indices[2] + clusterInfo.vertexOffset) * 3 + 0];
		vertices[2].y = uPositions[(indices[2] + clusterInfo.vertexOffset) * 3 + 1];
		vertices[2].z = uPositions[(indices[2] + clusterInfo.vertexOffset) * 3 + 2];
		vertices[2].w = 1.0;
		
		const mat4 transform = uPushConsts.viewProjection * uTransformData[clusterInfo.transformIndex];	
		
		vertices[0] = transform * vertices[0];
		vertices[1] = transform * vertices[1];
		vertices[2] = transform * vertices[2];
		
		
		cull = cullTriangle(indices, vertices, uPushConsts.resolution, bool(uPushConsts.cullBackface));
	}
	
	uvec4 validBallot = subgroupBallot(!cull);
	
	const uint subgroupIndexCount = subgroupBallotBitCount(validBallot) * 3;
	uint localSlot = subgroupBallotExclusiveBitCount(validBallot) * 3;
	
	if (subgroupElect())
	{
		subgroupIndexCounts[gl_SubgroupID] = subgroupIndexCount;
	}
	
	barrier();
	
	if (gl_LocalInvocationID.x == 0)
	{
		uint workGroupIndexCount = 0;
		for (uint i = 0; i < 8; ++i)
		{
			const uint indexCount = i < gl_NumSubgroups ? subgroupIndexCounts[i] : 0;
			workGroupIndexCount += indexCount;
			subgroupIndexCounts[i] = workGroupIndexCount - indexCount;
		}
		workGroupOutputSlot = atomicAdd(uCmd.indexCount, workGroupIndexCount);
	}
	
	barrier();
	
	const uint outputIndexOffset = workGroupOutputSlot + subgroupIndexCounts[gl_SubgroupID] + localSlot;
	
	if (!cull)
	{
		uFilteredIndices[outputIndexOffset + 0] = (clusterInfo.drawCallIndex << 16) | indices[0];
		uFilteredIndices[outputIndexOffset + 1] = (clusterInfo.drawCallIndex << 16) | indices[1];
		uFilteredIndices[outputIndexOffset + 2] = (clusterInfo.drawCallIndex << 16) | indices[2];
	}
}