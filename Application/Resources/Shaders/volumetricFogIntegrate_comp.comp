#version 450

#include "volumetricFogIntegrate_bindings.h"

#define VOLUME_DEPTH (64)

layout(set = RESULT_IMAGE_SET, binding = RESULT_IMAGE_BINDING, rgba16f) uniform image3D uResultImage;
layout(set = INPUT_IMAGE_SET, binding = INPUT_IMAGE_BINDING) uniform texture3D uInputImage;
layout(set = POINT_SAMPLER_SET, binding = POINT_SAMPLER_BINDING) uniform sampler uPointSampler;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

vec4 accumulateScattering(vec4 colorAndDensityFront, vec4 colorAndDensityBack)
{
	// rgb = in-scattered light accumulated so far,
	// a = accumulated scattering coefficient
	vec3 light = colorAndDensityFront.rgb +colorAndDensityBack.rgb;//+ clamp(exp(-colorAndDensityFront.a), 0.0, 1.0) * colorAndDensityBack.rgb;
	return vec4(light.rgb, colorAndDensityFront.a + colorAndDensityBack.a);
}

void writeOutput(ivec3 pos, vec4 colorAndDensity)
{
	// final value rgb = in-scattered light accumulated so far,
	// a = scene light transmittance
	vec4 finalValue = vec4(colorAndDensity.rgb, exp(-colorAndDensity.a));
	imageStore(uResultImage, pos, finalValue);
}

vec4 scatterStep(vec3 accumulatedLight, float accumulatedTransmittance, vec3 sliceLight, float sliceDensity)
{
	sliceDensity = max(sliceDensity, 1e-5);
	float sliceTransmittance = exp(-sliceDensity / VOLUME_DEPTH);
	
	vec3 sliceLightIntegral = sliceLight * (1.0 - sliceTransmittance) / sliceDensity;
	
	accumulatedLight += sliceLightIntegral * accumulatedTransmittance;
	accumulatedTransmittance *= sliceTransmittance;
	
	return vec4(accumulatedLight, accumulatedTransmittance);
}

void main() 
{
	vec4 accum = vec4(0.0, 0.0, 0.0, 1.0);
	ivec3 pos = ivec3(gl_GlobalInvocationID.xy, 0);
	
	for (int z = 0; z < VOLUME_DEPTH; ++z)
	{
		pos.z = z;
		vec4 slice = texelFetch(sampler3D(uInputImage, uPointSampler), pos, 0);
		accum = scatterStep(accum.rgb, accum.a, slice.rgb, slice.a);
		imageStore(uResultImage, pos, accum);
	}
	
	//vec4 currentValue = imageLoad(uResultImage, pos);
	//writeOutput(pos, currentValue);
	//
	//for (pos.z = 1; pos.z < VOLUME_DEPTH; ++pos.z)
	//{
	//	vec4 nextValue = imageLoad(uResultImage, pos);
	//	currentValue = accumulateScattering(currentValue, nextValue);
	//	writeOutput(pos, currentValue);
	//}
}