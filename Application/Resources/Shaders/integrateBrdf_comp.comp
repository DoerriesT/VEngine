#version 450

#include "integrateBrdf_bindings.h"
#include "monteCarlo.h"

layout(set = RESULT_IMAGE_SET, binding = RESULT_IMAGE_BINDING, rg16f) uniform writeonly image2D uResultImage;

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
// efficient VanDerCorpus calculation.
float RadicalInverse_VdC(uint bits) 
{
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

void main() 
{
	if (gl_GlobalInvocationID.x >= uPushConsts.width || gl_GlobalInvocationID.y >= uPushConsts.height)
	{
		return;
	}
	
	float roughness = (gl_GlobalInvocationID.x + 0.5) * uPushConsts.texelWidth;
	float NdotV = (gl_GlobalInvocationID.y + 0.5) * uPushConsts.texelHeight;
	float a = roughness * roughness;
	float a2 = a * a;
	
	vec3 V;
	V.x = sqrt(1.0 - NdotV * NdotV); // sin
	V.y = 0.0;
	V.z = NdotV; // cos;
	
	float A = 0.0;
	float B = 0.0;
	
	const uint numSamples = 1024;
	for (uint i = 0; i < numSamples; ++i)
	{
		vec2 Xi = Hammersley(i, numSamples);
		vec3 H = importanceSampleGGX(Xi, vec3(0.0, 0.0, 1.0), a2);
		vec3 L = 2.0 * dot(V, H) * H - V;
		
		float NdotL = clamp(L.z, 0.0, 1.0);
		float NdotH = clamp(H.z, 0.0, 1.0);
		float VDotH = clamp(dot(V, H), 0.0, 1.0);
		
		if (NdotL > 0.0)
		{
			float Vis = V_SmithGGXCorrelated(NdotV, NdotL, a2);
			float NdotL_Vis_PDF = NdotL * Vis * 4.0 * VDotH / NdotH;

			float Fc = pow5(1.0 - VDotH);
			A += (1.0 - Fc) * NdotL_Vis_PDF;
			B += Fc * NdotL_Vis_PDF;
		}
	}
	
	imageStore(uResultImage, ivec2(gl_GlobalInvocationID.xy), vec4(A, B, 0.0, 0.0) / numSamples);
}