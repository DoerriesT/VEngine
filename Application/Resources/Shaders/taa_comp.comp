#version 450

#include "taa_bindings.h"

#define LUMA_RGB_TUPLE vec3(0.2126, 0.7152, 0.0722)
#define LOCAL_SIZE_X 8
#define LOCAL_SIZE_Y 8

layout(set = RESULT_IMAGE_SET, binding = RESULT_IMAGE_BINDING, rgba16f) uniform image2D uResultImage;
layout(set = DEPTH_IMAGE_SET, binding = DEPTH_IMAGE_BINDING) uniform sampler2D uDepthTexture;
layout(set = VELOCITY_IMAGE_SET, binding = VELOCITY_IMAGE_BINDING) uniform sampler2D uVelocityTexture;
layout(set = HISTORY_IMAGE_SET, binding = HISTORY_IMAGE_BINDING) uniform sampler2D uHistoryTexture;
layout(set = SOURCE_IMAGE_SET, binding = SOURCE_IMAGE_BINDING) uniform sampler2D uSourceTexture;

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = 1) in;


vec3 rgbToYcocg(vec3 color)
{
	vec3 result;
	result.x = dot(color, vec3(  1, 2,  1 ) );
	result.y = dot(color, vec3(  2, 0, -2 ) );
	result.z = dot(color, vec3( -1, 2, -1 ) );
	
	return result;
}

vec3 ycocgToRgb(vec3 color )
{
	float y  = color.x * 0.25;
	float co = color.y * 0.25;
	float cg = color.z * 0.25;

	vec3 result;
	result.r = y + co - cg;
	result.g = y + cg;
	result.b = y - co - cg;

	return result;
}

vec3 sampleHistory(vec2 texCoord, vec4 rtMetrics)
{
	const float sharpening = uPushConsts.bicubicSharpness;  // [0.0, 1.0]

	vec2 samplePos = texCoord * rtMetrics.xy;
	vec2 tc1 = floor(samplePos - 0.5) + 0.5;
	vec2 f = samplePos - tc1;
	vec2 f2 = f * f;
	vec2 f3 = f * f2;

	// Catmull-Rom weights
	const float c = sharpening;
	vec2 w0 = -(c)       * f3 + (2.0 * c)        * f2 - (c * f);
	vec2 w1 =  (2.0 - c) * f3 - (3.0 - c)        * f2            + 1.0;
	vec2 w2 = -(2.0 - c) * f3 + (3.0 -  2.0 * c) * f2 + (c * f);
	vec2 w3 =  (c)       * f3 - (c)              * f2;

	vec2 w12  = w1 + w2;
	vec2 tc0  = (tc1 - 1.0)      * rtMetrics.zw;
	vec2 tc3  = (tc1 + 2.0)      * rtMetrics.zw;
	vec2 tc12 = (tc1 + w2 / w12) * rtMetrics.zw;
	
	// Bicubic filter using bilinear lookups, skipping the 4 corner texels
	vec4 filtered = vec4(textureLod(uHistoryTexture, vec2(tc12.x, tc0.y ), 0).rgb, 1.0) * (w12.x *  w0.y) +
	                  vec4(textureLod(uHistoryTexture, vec2(tc0.x,  tc12.y), 0).rgb, 1.0) * ( w0.x * w12.y) +
	                  vec4(textureLod(uHistoryTexture, vec2(tc12.x, tc12.y), 0).rgb, 1.0) * (w12.x * w12.y) +  // Center pixel
	                  vec4(textureLod(uHistoryTexture, vec2(tc3.x,  tc12.y), 0).rgb, 1.0) * ( w3.x * w12.y) +
	                  vec4(textureLod(uHistoryTexture, vec2(tc12.x, tc3.y ), 0).rgb, 1.0) * (w12.x *  w3.y);
	
	return filtered.rgb * (1.0 / filtered.a);
}

vec3 clipAABB(vec3 point, vec3 aabbMin, vec3 aabbMax)
{
    //Clips towards AABB center for better perfomance
    vec3 center   = 0.5 * (aabbMax + aabbMin);
    vec3 halfSize = 0.5 * (aabbMax - aabbMin) + 1e-5;
    //Relative position from the center
    vec3 clip     = point - center;
    //Normalize relative position
    vec3 unit     = clip / halfSize;
    vec3 absUnit  = abs(unit);
    float maxUnit = max(absUnit.x, max(absUnit.y, absUnit.z));
	
	return (maxUnit > 1.0) ? clip * (1.0 / maxUnit) + center : point;
}

float intersectAABB(vec3 rayDir, vec3 rayOrg, vec3 boxExt)
{
	if (length(rayDir) < 1e-6) return 1;

	// Intersection using slabs
	vec3 rcpDir = 1.0 / rayDir;
	vec3 tNeg = ( boxExt - rayOrg) * rcpDir;
	vec3 tPos = (-boxExt - rayOrg) * rcpDir;
	return max(max(min(tNeg.x, tPos.x), min(tNeg.y, tPos.y)), min(tNeg.z, tPos.z));
}

float clipHistory(vec3 cHistory, vec3 cM, vec3 cMin, vec3 cMax)
{
	// Clip color difference against neighborhood min/max AABB
	// Clipped color is cHistory + rayDir * result
	
	vec3 boxCenter = (cMax + cMin) * 0.5;
	vec3 boxExtents = cMax - boxCenter;
	
	vec3 rayDir = cM - cHistory;
	vec3 rayOrg = cHistory - boxCenter;
	
	return clamp(intersectAABB(rayDir, rayOrg, boxExtents), 0.0, 1.0);
}

vec3 tonemap(vec3 color)
{
	return color / max((1.0 + dot(color, LUMA_RGB_TUPLE)), 1e-6);
}

vec3 inverseTonemap(vec3 color)
{
	return color / max((1.0 - dot(color, LUMA_RGB_TUPLE)), 1e-6);
}

float square(float a)
{
	return a * a;
}

vec2 weightedLerpFactors(float weightA, float weightB, float blend)
{
	float blendA = (1.0 - blend) * weightA;
	float blendB = blend * weightB;
	float invBlend = 1.0 / (blendA + blendB);
	blendA *= invBlend;
	blendB *= invBlend;
	return vec2(blendA, blendB);
}

void main() 
{
	// find frontmost velocity in neighborhood
	ivec2 velocityCoordOffset = ivec2(0);
	float closestDepth = 0.0;
	for (int y = -1; y < 2; ++y)
	{
		for (int x = -1; x < 2; ++x)
		{
			float depth = texelFetch(uDepthTexture, ivec2(gl_GlobalInvocationID.xy) + ivec2(x, y), 0).x;
			velocityCoordOffset = depth > closestDepth ? ivec2(x, y) : velocityCoordOffset;
			closestDepth = depth > closestDepth ? depth : closestDepth;
		}
	}
	
	vec2 velocity = texelFetch(uVelocityTexture, ivec2(gl_GlobalInvocationID.xy) + velocityCoordOffset, 0).xy;
	
	vec3 currentColor = rgbToYcocg(texelFetch(uSourceTexture, ivec2(gl_GlobalInvocationID.xy), 0).rgb);
	vec3 neighborhoodMin = currentColor;
	vec3 neighborhoodMax = currentColor;
	vec3 neighborhoodMinPlus = currentColor;
	vec3 neighborhoodMaxPlus = currentColor;
	
	for (int y = -1; y < 2; ++y)
	{
		for (int x = -1; x < 2; ++x)
		{
			vec3 tap = rgbToYcocg(texelFetch(uSourceTexture, ivec2(gl_GlobalInvocationID.xy) + ivec2(x, y), 0).rgb);
			neighborhoodMin = min(tap, neighborhoodMin);
			neighborhoodMax = max(tap, neighborhoodMax);
			neighborhoodMinPlus = (x == 0 || y == 0) ? min(tap, neighborhoodMinPlus) : neighborhoodMinPlus;
			neighborhoodMaxPlus = (x == 0 || y == 0) ? max(tap, neighborhoodMaxPlus) : neighborhoodMaxPlus;
		}
	}
	
	neighborhoodMin = mix(neighborhoodMin, neighborhoodMinPlus, 0.5);
	neighborhoodMax = mix(neighborhoodMax, neighborhoodMaxPlus, 0.5);
	
	vec2 texelSize = 1.0 / vec2(textureSize(uSourceTexture, 0).xy);
	vec2 texCoord = (vec2(gl_GlobalInvocationID.xy) + 0.5) * texelSize;
	vec2 prevTexCoord = texCoord - velocity;
	
	vec3 historyColor = rgbToYcocg(max(sampleHistory(prevTexCoord, vec4(vec2(textureSize(uSourceTexture, 0).xy), texelSize)).rgb, 0.0.xxx));
	historyColor = clipAABB(historyColor, neighborhoodMin, neighborhoodMax);
	
	vec2 domainSize = vec2(textureSize(uSourceTexture, 0).xy);
	float subpixelCorrection = abs(fract(max(abs(prevTexCoord.x) * domainSize.x, abs(prevTexCoord.y) * domainSize.y)) * 2.0 - 1.0);
	
	float alpha = mix(0.05, 0.8, subpixelCorrection);
	alpha *= uPushConsts.jitterOffsetWeight;
	alpha = prevTexCoord.x <= 0.0 || prevTexCoord.x >= 1.0 || prevTexCoord.y <= 0.0 || prevTexCoord.y >= 1.0 ? 1.0 : alpha;
	
	vec2 factors = weightedLerpFactors(1.0 / (historyColor.x + 4.0), 1.0 / (currentColor.x + 4.0), alpha);
	
	vec3 result = historyColor * factors.x + currentColor * factors.y;
	
	imageStore(uResultImage, ivec2(gl_GlobalInvocationID.xy), vec4(ycocgToRgb(result), 1.0));
}