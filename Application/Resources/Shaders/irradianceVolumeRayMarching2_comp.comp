#version 450

#include "irradianceVolumeRayMarching2_bindings.h"
#include "common.h"

layout(set = BRICK_PTR_IMAGE_SET, binding = BRICK_PTR_IMAGE_BINDING) uniform usampler3D uBrickPtrImage;
layout(set = BIN_VIS_IMAGE_SET, binding = BIN_VIS_IMAGE_BINDING) uniform usampler3D uBinVisImage;
layout(set = COLOR_IMAGE_SET, binding = COLOR_IMAGE_BINDING) uniform sampler3D uColorImage;
layout(set = RESULT_IMAGE_SET, binding = RESULT_IMAGE_BINDING, rgba16f) uniform image2D uResultImage;
layout(set = DISTANCE_IMAGE_SET, binding = DISTANCE_IMAGE_BINDING, r16f) uniform image2D uDistanceImage;

layout(set = QUEUE_BUFFER_SET, binding = QUEUE_BUFFER_BINDING) readonly buffer QUEUE_BUFFER
{
	uint uQueueSize;
	float uP;
	uint uQueue[];
};

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout(constant_id = GRID_WIDTH_CONST_ID) const uint cGridWidth = 64;
layout(constant_id = GRID_HEIGHT_CONST_ID) const uint cGridHeight = 32;
layout(constant_id = GRID_DEPTH_CONST_ID) const uint cGridDepth = 64;
layout(constant_id = CASCADES_CONST_ID) const uint cCascades = 3;
layout(constant_id = GRID_BASE_SCALE_CONST_ID) const float cGridBaseScale = 2.0;
layout(constant_id = BRICK_VOLUME_WIDTH_CONST_ID) const uint cBrickVolumeWidth = 128;
layout(constant_id = BRICK_VOLUME_HEIGHT_CONST_ID) const uint cBrickVolumeHeight = 64;
layout(constant_id = BRICK_VOLUME_DEPTH_CONST_ID) const uint cBrickVolumeDepth = 128;
layout(constant_id = VOXEL_GRID_WIDTH_CONST_ID) const uint cVoxelGridWidth = 2048;
layout(constant_id = VOXEL_GRID_HEIGHT_CONST_ID) const uint cVoxelGridHeight = 1024;
layout(constant_id = VOXEL_GRID_DEPTH_CONST_ID) const uint cVoxelGridDepth = 2048;
layout(constant_id = VOXEL_SCALE_CONST_ID) const float cVoxelScale = 16.0;
layout(constant_id = BIN_VIS_BRICK_SIZE_CONST_ID) const uint cBinVisBrickSize = 16;
layout(constant_id = COLOR_BRICK_SIZE_CONST_ID) const uint cColorBrickSize = 4;


layout (local_size_x = IRRADIANCE_VOLUME_RAY_MARCHING_RAY_COUNT, local_size_y = 1, local_size_z = 1) in;


/**  Generate a spherical fibonacci point

    http://lgdv.cs.fau.de/publications/publication/Pub.2015.tech.IMMD.IMMD9.spheri/

    To generate a nearly uniform point distribution on the unit sphere of size N, do
    for (float i = 0.0; i < N; i += 1.0) {
        float3 point = sphericalFibonacci(i,N);
    }

    The points go from z = +1 down to z = -1 in a spiral. To generate samples on the +z hemisphere,
    just stop before i > N/2.

*/
vec3 sphericalFibonacci(float i, float n) {
    const float PHI = sqrt(5) * 0.5 + 0.5;
#   define madfrac(A, B) ((A)*(B)-floor((A)*(B)))
    float phi = 2.0 * PI * madfrac(i, PHI - 1);
    float cosTheta = 1.0 - (2.0 * i + 1.0) * (1.0 / n);
    float sinTheta = sqrt(clamp(1.0 - cosTheta * cosTheta, 0.0, 1.0));

    return vec3(
        cos(phi) * sinTheta,
        sin(phi) * sinTheta,
        cosTheta);

#   undef madfrac
}

uint rand_xorshift(uint rngState)
{
    // Xorshift algorithm from George Marsaglia's paper
    rngState ^= (rngState << 13);
    rngState ^= (rngState >> 17);
    rngState ^= (rngState << 5);
    return rngState;
}

uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

mat3 randomOrientation()
{
	uint rngState = wang_hash(floatBitsToInt(uPushConsts.time));
	vec3 axis = normalize(vec3(rand_xorshift(rngState), rand_xorshift(rngState), rand_xorshift(rngState)) * (1.0 / 4294967296.0));
	float angle = rand_xorshift(rngState) * (1.0 / 4294967296.0) * 2.0 * PI;

	mat3 m;
	float c = cos(angle);
	float s = sin(angle);
	float oneMinusCos = 1.0 - c;
	float x2 = axis.x * axis.x;
	float y2 = axis.y * axis.y;
	float z2 = axis.z * axis.z;
	float xym = axis.x * axis.y * oneMinusCos;
	float xzm = axis.x * axis.z * oneMinusCos;
	float yzm = axis.y * axis.z * oneMinusCos;
	float xSin = axis.x * s;
	float ySin = axis.y * s;
	float zSin = axis.z * s;

	m[0][0] = x2 * oneMinusCos + c;
	m[0][1] = xym - zSin;
	m[0][2] = xzm + ySin;

	m[1][0] = xym + zSin;
	m[1][1] = y2 * oneMinusCos + c;
	m[1][2] = yzm - xSin;

	m[2][0] = xzm - ySin;
	m[2][1] = yzm + xSin;
	m[2][2] = z2 * oneMinusCos + c;

	return m;
}

bool raymarch(const vec3 origin, const vec3 dir, out vec3 color, out float dist)
{
	const vec3 p0 = origin * cVoxelScale;
	float t = 0.0;
	const vec3 gridSize = vec3(cVoxelGridWidth, cVoxelGridHeight, cVoxelGridDepth);
	
	while (true)
	{
		vec3 gridCoord = p0 + t * dir;
		if (any(lessThan(gridCoord, uPushConsts.voxelGridOffset)) || any(greaterThanEqual(gridCoord, gridSize + uPushConsts.voxelGridOffset)))
		{
			return false;
		}
		
		const vec3 brickGridSize = vec3(cBrickVolumeWidth, cBrickVolumeHeight, cBrickVolumeDepth);
		const vec3 invBrickGridSize = 1.0 / brickGridSize;
		
		const ivec3 brickCoord = ivec3(fract(floor(gridCoord / float(cBinVisBrickSize)) * invBrickGridSize) * brickGridSize);
		const uint brickPtr = texelFetch(uBrickPtrImage, brickCoord, 0).x;
		
		// skip brick
		if (brickPtr == 0)
		{
			const vec3 invDir = 1.0 / dir;
			const vec3 originDivDir = p0 * invDir;
			const vec3 aabbMin = floor(gridCoord / float(cBinVisBrickSize)) * cBinVisBrickSize;
			const vec3 aabbMax = aabbMin + cBinVisBrickSize;
			const vec3 tMin = aabbMin * invDir - originDivDir;
			const vec3 tMax = aabbMax * invDir - originDivDir;
			const vec3 t2 = max(tMin, tMax);
			t = max(min(min(t2.x, t2.y), t2.z), t) + 0.1;
			continue;
		}
		
		uvec2 binVis = uvec2(0);
		if (brickPtr != 0)
		{
			const ivec3 brickAddress = ivec3((brickPtr >> 16) & 0xFF, (brickPtr >> 8) & 0xFF, (brickPtr) & 0xFF);
			
			const float cubesPerBrick = cBinVisBrickSize * 0.25;
			const int cubesPerBrickI = int(cBinVisBrickSize) / 4;
			const ivec3 cubeCoord = ivec3(fract(gridCoord / float(cBinVisBrickSize)) * cubesPerBrick);
			
			const ivec3 cubeAddress = brickAddress * cubesPerBrickI + cubeCoord;
			
			binVis[0] = texelFetch(uBinVisImage, ivec3(cubeAddress.x, cubeAddress.y * 2 + 0, cubeAddress.z), 0).x;
			binVis[1] = texelFetch(uBinVisImage, ivec3(cubeAddress.x, cubeAddress.y * 2 + 1, cubeAddress.z), 0).x;
		}
		
		bool hit = false;
		
		// dda inside 4x4x4 cube
		if (binVis.x != 0 || binVis.y != 0)
		{
			// grid space
			const vec3 gridStep = sign(dir);
			const vec3 corner = max(gridStep, vec3(0.0));
			
			// ray space
			const vec3 inv = 1.0 / dir;
			vec3 ratio = (floor(gridCoord) + corner - gridCoord) * inv;
			const vec3 ratioStep = gridStep * inv;
			const vec3 cubeCoord = floor(gridCoord * 0.25) * 4.0;
			gridCoord = floor(gridCoord);
			
			while (true)
			{
				ivec3 bitCoord = ivec3(fract(gridCoord * 0.25) * 4.0);
				uint bitIdx = bitCoord.x + bitCoord.z * 4 + bitCoord.y * 16;
				bool upper = bitIdx > 31;
				bitIdx = upper ? bitIdx - 32 : bitIdx;
				
				if((binVis[upper ? 1 : 0] & (1u << bitIdx)) != 0)
				{
					hit = true;
					break;
				}
				
				const ivec3 mask = ivec3(lessThanEqual(ratio.xyz, min(ratio.yzx, ratio.zxy)));
				gridCoord += gridStep * mask;		
				ratio += ratioStep * mask;
				
				if (cubeCoord != floor(gridCoord * 0.25) * 4.0)
				{
					break;
				}
			}
		}
		
		if (hit)
		{
			const ivec3 brickAddress = ivec3((brickPtr >> 16) & 0xFF, (brickPtr >> 8) & 0xFF, (brickPtr) & 0xFF);
			const ivec3 localCoord = ivec3(fract(gridCoord / float(cBinVisBrickSize)) * cColorBrickSize);
			const ivec3 colorAddress = brickAddress * int(cColorBrickSize) + localCoord;
			color = texelFetch(uColorImage, colorAddress, 0).rgb;
			dist = distance(p0, gridCoord + 0.5) / cVoxelScale;
			return true;
		}
		
		// skip cube (the cube was empty or nothing got hit)
		{
			gridCoord = p0 + t * dir;
			const vec3 invDir = 1.0 / dir;
			const vec3 originDivDir = p0 * invDir;
			const vec3 aabbMin = floor(gridCoord * 0.25) * 4.0;
			const vec3 aabbMax = aabbMin + 4.0;
			const vec3 tMin = aabbMin * invDir - originDivDir;
			const vec3 tMax = aabbMax * invDir - originDivDir;
			const vec3 t2 = max(tMin, tMax);
			t = max(min(min(t2.x, t2.y), t2.z), t) + 0.1;
		}
	}
	return false;
}

void main() 
{
	const ivec3 gridSize = ivec3(cGridWidth, cGridHeight, cGridDepth);
	
	// get cell index and cascade index
	uint cellIndex = uQueue[gl_WorkGroupID.x];
	const uint cascade = cellIndex / (cGridWidth * cGridHeight * cGridDepth);
	cellIndex -= cascade * (cGridWidth * cGridHeight * cGridDepth);
	
	// get cell coordinate
	ivec3 cellCoord;
	cellCoord.y = int(cellIndex / (gridSize.x * gridSize.z));
	cellCoord.x = int(cellIndex % gridSize.x);
	cellCoord.z = int((cellIndex - cellCoord.y * (gridSize.x * gridSize.z)) / gridSize.x);
	
	ivec3 gridOffset = ivec3(round(uPushConsts.cameraPosition.xyz * (cGridBaseScale / (1 << cascade)))) - gridSize / 2;
	const vec3 worldSpacePos = vec3(cellCoord + gridOffset) / (cGridBaseScale / (1 << cascade));
	
	const vec3 dir = randomOrientation() * sphericalFibonacci(float(gl_LocalInvocationID.x), IRRADIANCE_VOLUME_RAY_MARCHING_RAY_COUNT);
	
	const float maxDistance = (1.0 / cGridBaseScale * (1 << cascade)) * 4.0;
	float hitDistance;
	vec3 rayHitColor;
	if (!raymarch(worldSpacePos + dir * 0.11, dir, rayHitColor, hitDistance))
	{
		rayHitColor = vec3(0.529, 0.808, 0.922);
		hitDistance = maxDistance;
	}
	
	hitDistance = min(maxDistance, hitDistance);
	
	imageStore(uResultImage, ivec2(gl_LocalInvocationID.x, gl_WorkGroupID.x), vec4(rayHitColor.rgb, 1.0));
	imageStore(uDistanceImage, ivec2(gl_LocalInvocationID.x, gl_WorkGroupID.x), vec4(hitDistance));
}