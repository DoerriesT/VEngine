#version 450

#include "clearVoxels_bindings.h"

layout(set = OPACITY_IMAGE_SET, binding = OPACITY_IMAGE_BINDING, r8) uniform image3D uOpacityImage;

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout(constant_id = VOXEL_GRID_WIDTH_CONST_ID) const uint cVoxelGridWidth = 128;
layout(constant_id = VOXEL_GRID_HEIGHT_CONST_ID) const uint cVoxelGridHeight = 64;
layout(constant_id = VOXEL_GRID_DEPTH_CONST_ID) const uint cVoxelGridDepth = 128;
layout(constant_id = VOXEL_BASE_SCALE_CONST_ID) const float cVoxelBaseScale = 8.0;
layout(constant_id = VOXEL_CASCADES_CONST_ID) const uint cVoxelCascades = 3;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main() 
{
	const ivec3 gridSize = ivec3(cVoxelGridWidth, cVoxelGridHeight, cVoxelGridDepth);
	
	// early exit if this invocation is outside the grid
	if (gl_GlobalInvocationID.x < gridSize.x && gl_GlobalInvocationID.y < gridSize.y && gl_GlobalInvocationID.z < gridSize.z)
	{
		// iterate over all cascades and test if the cascade moved
		float curVoxelScale = cVoxelBaseScale;
		for (int i = 0; i < cVoxelCascades; ++i)
		{
			const ivec3 cameraCoord = ivec3(round(uPushConsts.cameraPos.xyz * curVoxelScale));
			const ivec3 prevCameraCoord = ivec3(round(uPushConsts.prevCameraPos.xyz * curVoxelScale));
			const ivec3 diff = cameraCoord - prevCameraCoord;
			curVoxelScale *= 0.5;
			
			// is the voxel outside the grid after applying camera movement?
			ivec3 coord = ivec3(gl_GlobalInvocationID.xyz) + diff;
			if (any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, gridSize)))
			{
				// move coordinate to world space fixed coordinate system (toroidal addressing)
				coord += cameraCoord - (gridSize / 2) - diff;
				// apply wrapping
				coord = ivec3(fract(coord / vec3(gridSize)) * gridSize);
				// cascades are stacked on top of each other in order to combine them in a single image
				coord += ivec3(0, i * cVoxelGridHeight, 0);
				// actually cascades are stacked along the z axis, so swizzle z and y
				coord = coord.xzy;
				imageStore(uOpacityImage, coord, vec4(0.0));
			}
		}
	}
}