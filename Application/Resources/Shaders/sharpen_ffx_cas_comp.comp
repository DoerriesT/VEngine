#version 450

#include "sharpen_ffx_cas_bindings.h"

layout(set = RESULT_IMAGE_SET, binding = RESULT_IMAGE_BINDING) uniform writeonly image2D uResultImage;
layout(set = SOURCE_IMAGE_SET, binding = SOURCE_IMAGE_BINDING) uniform texture2D uSourceTexture;
layout(set = POINT_SAMPLER_SET, binding = POINT_SAMPLER_BINDING) uniform sampler uPointSampler;

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

vec3 accurateLinearToSRGB(in vec3 linearCol)
{
	vec3 sRGBLo = linearCol * 12.92;
	vec3 sRGBHi = (pow(abs(linearCol), vec3(1.0/2.4)) * 1.055) - 0.055;
	vec3 sRGB = mix(sRGBLo, sRGBHi, vec3(greaterThan(linearCol, vec3(0.0031308))));
	return sRGB;
}

vec3 accurateSRGBToLinear(in vec3 sRGBCol)
{
	vec3 linearRGBLo = sRGBCol * (1.0 / 12.92);
	vec3 linearRGBHi = pow((sRGBCol + vec3(0.055)) * vec3(1.0 / 1.055), vec3(2.4));
	vec3 linearRGB = mix(linearRGBLo, linearRGBHi, vec3(greaterThan(sRGBCol, vec3(0.04045))));
	return linearRGB;
}

#define A_GPU 1
#define A_GLSL 1

#include "ffx_a.h"

AF3 CasLoad(ASU2 p)
{
	return texelFetch(sampler2D(uSourceTexture, uPointSampler), ivec2(p), 0).rgb;
}

void CasInput(inout AF1 r, inout AF1 g, inout AF1 b) 
{
	if (uPushConsts.gammaSpaceInput != 0)
	{
		vec3 c = vec3(r, g, b);
		c = accurateSRGBToLinear(c);
		r = c.r;
		g = c.g;
		b = c.b;
	}
}

#include "ffx_cas.h"

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main() 
{
	AU2 gxy = ARmp8x8(gl_LocalInvocationID.x) + AU2(gl_WorkGroupID.x << 4u, gl_WorkGroupID.y << 4u);
	
	const uvec4 const0 = uPushConsts.const0;
	const uvec4 const1 = uPushConsts.const1;
	
	AF3 c;
	CasFilter(c.r, c.g, c.b, gxy, const0, const1, true);
	imageStore(uResultImage, ivec2(gxy), vec4(accurateLinearToSRGB(c), 1.0));
	gxy.x += 8u;
	
	CasFilter(c.r, c.g, c.b, gxy, const0, const1, true);
	imageStore(uResultImage, ivec2(gxy), vec4(accurateLinearToSRGB(c), 1.0));
	gxy.y += 8u;
	
	CasFilter(c.r, c.g, c.b, gxy, const0, const1, true);
	imageStore(uResultImage, ivec2(gxy), vec4(accurateLinearToSRGB(c), 1.0));
	gxy.x -= 8u;
	
	CasFilter(c.r, c.g, c.b, gxy, const0, const1, true);
	imageStore(uResultImage, ivec2(gxy), vec4(accurateLinearToSRGB(c), 1.0));
}