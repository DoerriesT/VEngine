#version 450

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable

#include "occlusionCullingCreateDrawArgs_bindings.h"

struct DrawIndexedIndirectCommand 
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

struct SubMeshData
{
	uint indexCount;
	uint firstIndex;
	int vertexOffset;
};

struct SubMeshInstanceData
{
	uint subMeshIndex;
	uint transformIndex;
	uint materialIndex;
};

layout(set = INSTANCE_DATA_SET, binding = INSTANCE_DATA_BINDING) readonly buffer INSTANCE_DATA 
{
    SubMeshInstanceData uInstanceData[];
};

layout(set = SUB_MESH_DATA_SET, binding = SUB_MESH_DATA_BINDING) readonly buffer SUB_MESH_DATA 
{
    SubMeshData uSubMeshData[];
};

layout(set = INDIRECT_BUFFER_SET, binding = INDIRECT_BUFFER_BINDING) buffer INDIRECT_BUFFER 
{
    DrawIndexedIndirectCommand uIndirectCommands[];
};

layout(set = DRAW_COUNTS_SET, binding = DRAW_COUNTS_BINDING) buffer DRAW_COUNTS 
{
    uint uDrawCounts[];
};

layout(set = VISIBILITY_BUFFER_SET, binding = VISIBILITY_BUFFER_BINDING) buffer VISIBILITY_BUFFER 
{
    uint uVisibilityBuffer[];
};

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main() 
{
	const uint instanceIndex = uPushConsts.instanceOffset + gl_GlobalInvocationID.x;
	bool thisInvocationActive = gl_GlobalInvocationID.x < uPushConsts.drawCallCount;
	
	DrawIndexedIndirectCommand cmd;
	
	if (thisInvocationActive)
	{
		SubMeshData subMeshData = uSubMeshData[uInstanceData[instanceIndex].subMeshIndex];
		
		cmd.indexCount = subMeshData.indexCount;
		cmd.instanceCount = 1;
		cmd.firstIndex = subMeshData.firstIndex;
		cmd.vertexOffset = subMeshData.vertexOffset;
		cmd.firstInstance = instanceIndex;
	}
	
	thisInvocationActive = thisInvocationActive && uVisibilityBuffer[instanceIndex] != 0;
	const uvec4 validBallot = subgroupBallot(thisInvocationActive);
	
	const uint outputCmdCount = subgroupBallotBitCount(validBallot);
	const uint localSlot = subgroupBallotExclusiveBitCount(validBallot);
	
	uint globalSlot = 0;
	if (subgroupElect())
	{
		globalSlot = uPushConsts.drawCallOffset + atomicAdd(uDrawCounts[uPushConsts.batchIndex], outputCmdCount);
	}
	
	globalSlot = subgroupBroadcastFirst(globalSlot);
	
	if (thisInvocationActive)
	{
		uIndirectCommands[globalSlot + localSlot] = cmd;
	}
}