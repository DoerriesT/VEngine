#version 450

#include "luminanceHistogram_bindings.h"

#define LOCAL_SIZE_X 64

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout(set = SOURCE_IMAGE_SET, binding = SOURCE_IMAGE_BINDING) uniform sampler2D uSourceTexture;

layout(set = LUMINANCE_HISTOGRAM_SET, binding = LUMINANCE_HISTOGRAM_BINDING) buffer LUMINANCE_HISTOGRAM
{
    uint uLuminanceHistogram[];
};

layout (local_size_x = LOCAL_SIZE_X, local_size_y = 1, local_size_z = 1) in;

shared uint localHistogram[LUMINANCE_HISTOGRAM_SIZE];

void main() 
{
	const uint groupId = gl_WorkGroupID.x;
	const uint threadId = gl_LocalInvocationID.x;
	
	// clear local histogram
	for (uint i = threadId; i < LUMINANCE_HISTOGRAM_SIZE; i += LOCAL_SIZE_X)
	{
		localHistogram[i] = 0;
	}
	
	barrier();
	
	const uint width = uint(textureSize(uSourceTexture, 0).x);
	
	for (uint i = threadId; i < width; i += LOCAL_SIZE_X)
	{
		if (i < width)
		{
			vec3 color = texelFetch(uSourceTexture, ivec2(i, groupId), 0).rgb;
			float luma = dot(color, vec3(0.2126, 0.7152, 0.0722));
		
			luma = log2(max(luma, 1e-5)) * uPushConsts.scale + uPushConsts.bias;//log(luma + 1.0) * 128;
			
			uint bucket = uint(clamp(luma, 0.0, 1.0) * (LUMINANCE_HISTOGRAM_SIZE - 1));//min(uint(luma), 255);
			
			atomicAdd(localHistogram[bucket], 1);
		}
	}
	
	barrier();
	
	for (uint i = threadId; i < LUMINANCE_HISTOGRAM_SIZE; i += LOCAL_SIZE_X)
	{
		atomicAdd(uLuminanceHistogram[i], localHistogram[i]);
	}
}