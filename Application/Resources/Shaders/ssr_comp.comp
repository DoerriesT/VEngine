#version 450

#include "ssr_bindings.h"
#include "common.h"
#include "monteCarlo.h"

layout(constant_id = WIDTH_CONST_ID) const uint cWidth = 1600;
layout(constant_id = HEIGHT_CONST_ID) const uint cHeight = 900;
layout(constant_id = TEXEL_WIDTH_CONST_ID) const float cTexelWidth = 1.0 / 1600.0;
layout(constant_id = TEXEL_HEIGHT_CONST_ID) const float cTexelHeight = 1.0 / 900;

layout(set = RAY_HIT_PDF_IMAGE_SET, binding = RAY_HIT_PDF_IMAGE_BINDING, rgba16f) uniform writeonly image2D uRayHitPdfImage;
layout(set = MASK_IMAGE_SET, binding = MASK_IMAGE_BINDING, r8) uniform writeonly image2D uMaskImage;
layout(set = HIZ_PYRAMID_IMAGE_SET, binding = HIZ_PYRAMID_IMAGE_BINDING) uniform texture2D uHiZPyramid;
layout(set = NORMAL_IMAGE_SET, binding = NORMAL_IMAGE_BINDING) uniform texture2D uNormalImage;
layout(set = POINT_SAMPLER_SET, binding = POINT_SAMPLER_BINDING) uniform sampler uPointSampler;

layout(set = TEXTURES_SET, binding = TEXTURES_BINDING) uniform texture2D uTextures[TEXTURE_ARRAY_SIZE];
layout(set = SAMPLERS_SET, binding = SAMPLERS_BINDING) uniform sampler uSamplers[SAMPLER_COUNT];

layout(push_constant) uniform PUSH_CONSTS 
{
	PushConsts uPushConsts;
};

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

vec2 getCell(vec2 ray, vec2 cellCount)
{
	return floor(ray.xy * cellCount);
}

vec2 getCellCount(float level)
{
	return vec2(textureSize(sampler2D(uHiZPyramid, uPointSampler), 0).xy) / (level == 0.0 ? 1.0 : exp2(level));
}

vec3 intersectCellBoundary(vec3 pos, vec3 dir, vec2 cellIdx, vec2 cellCount, vec2 crossStep, vec2 crossOffset)
{
	vec2 cellSize = 1.0 / cellCount;
	vec2 planes = (cellIdx + crossStep) * cellSize;
	
	vec2 solutions = (planes - pos.xy) / dir.xy;
	vec3 intersectionPos = pos + dir * min(solutions.x, solutions.y);
	intersectionPos.xy += (solutions.x < solutions.y) ? vec2(crossOffset.x, 0.0) : vec2(0.0, crossOffset.y);
	
	return intersectionPos;
}

bool crossedCellBoundary(vec2 cellIdx0, vec2 cellIdx1)
{
	return (int(cellIdx0.x) != int(cellIdx1.x)) || (int(cellIdx0.y) != int(cellIdx1.y));
}

float getMinimumDepthPlane(vec2 ray, float level, vec2 cellCount)
{
	return texelFetch(sampler2D(uHiZPyramid, uPointSampler), ivec2(ray.xy * cellCount), int(level)).x;
}

vec3 hiZTrace(vec3 p, vec3 v)
{
	float level = 0.0;
	float iterations = 0.0;
	vec3 vZ = v / v.z;
	vZ = -vZ;
	vec2 hiZSize = getCellCount(level);
	vec3 ray = p;
	
	vec2 crossStep = vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);
	vec2 crossOffset = crossStep * 0.00001;
	crossStep = clamp(crossStep, vec2(0.0), vec2(1.0));
	
	vec2 rayCell = getCell(ray.xy, hiZSize);
	ray = intersectCellBoundary(ray, v, rayCell, hiZSize, crossStep, crossOffset);
	
	const float MAX_ITERATIONS = 1024.0;
	float minZ = 0.0;
	
	while(level >= 0.0 && iterations < MAX_ITERATIONS)
	{
		const vec2 cellCount = getCellCount(level);
		const vec2 oldCellIdx = getCell(ray.xy, cellCount);
		
		
		minZ = getMinimumDepthPlane(ray.xy, level, cellCount);
		
		vec3 tmpRay = ray;
		if (v.z < 0.0)
		{
			float minMinusRay = (1.0 - minZ) - (1.0 - ray.z);
			tmpRay = minMinusRay > 0.0 ? ray + vZ * minMinusRay : tmpRay;
			const vec2 newCellIdx = getCell(tmpRay.xy, cellCount);
			
			if (crossedCellBoundary(oldCellIdx, newCellIdx))
			{
				tmpRay = intersectCellBoundary(ray, v, oldCellIdx, cellCount, crossStep, crossOffset);
				level = min(uPushConsts.hiZMaxLevel, level + 2.0);
			}
		}
		else if (ray.z > minZ)
		{
			tmpRay = intersectCellBoundary(ray, v, oldCellIdx, cellCount, crossStep, crossOffset);
			level = min(uPushConsts.hiZMaxLevel, level + 2.0);
		}
		

		ray = tmpRay;
		
		if (ray.x < 0.0 || ray.y < 0.0 || ray.x > 1.0 || ray.y > 1.0)
		{
			return vec3(-1.0);
		}
		
		--level;
		++iterations;
	}
	return iterations >= MAX_ITERATIONS || (minZ - ray.z) >= 0.0003 ? vec3(-1.0) : ray;
}

void main() 
{
	if (gl_GlobalInvocationID.x >= cWidth || gl_GlobalInvocationID.y >= cHeight)
	{
		return;
	}
	
	const float depth = texelFetch(sampler2D(uHiZPyramid, uPointSampler), ivec2(gl_GlobalInvocationID.xy), 0).x;
	if (depth == 0.0)
	{
		imageStore(uRayHitPdfImage, ivec2(gl_GlobalInvocationID.xy), vec4(-1.0, -1.0, -1.0, 1.0));
		imageStore(uMaskImage, ivec2(gl_GlobalInvocationID.xy), vec4(0.0));
		return;
	}
	
	const vec2 clipSpacePosition = vec2(gl_GlobalInvocationID.xy + 0.5) * vec2(cTexelWidth, cTexelHeight) * 2.0 - 1.0;
	vec4 viewSpacePosition = vec4(uPushConsts.unprojectParams.xy * clipSpacePosition, -1.0, uPushConsts.unprojectParams.z * depth + uPushConsts.unprojectParams.w);
	viewSpacePosition.xyz /= viewSpacePosition.w;
	
	const vec3 P = viewSpacePosition.xyz;
	const vec3 V = -normalize(viewSpacePosition.xyz);
	vec4 normalRoughness = texelFetch(sampler2D(uNormalImage, uPointSampler), ivec2(gl_GlobalInvocationID.xy), 0);
	const vec3 N = normalRoughness.xyz;
	const float roughness = normalRoughness.w;
	//const vec3 R = reflect(-V, N);
	
	vec3 H = N;
	vec3 R = N;
	float pdf = 1.0;
	float a = roughness * roughness;
	float a2 = a * a;
	for (int i = 0; i < 8; ++i)
	{
		vec2 noiseTexCoord = vec2(gl_GlobalInvocationID.xy + 0.5) * uPushConsts.noiseScale + (uPushConsts.noiseJitter) * (i + 1);
		vec2 noise = textureLod(sampler2D(uTextures[uPushConsts.noiseTexId], uSamplers[SAMPLER_POINT_REPEAT]), noiseTexCoord, 0.0).xy;
		noise.y = mix(noise.y, 0.0, uPushConsts.bias);
		H = importanceSampleGGX(noise, N, a2);
		R = reflect(-V, H.xyz);
		if (dot(N, R) > 1e-7)
		{
			pdf = pdfGGX(N, V, H, a2);
			break;
		}
	}
	
	vec3 pSS = vec3(vec2(gl_GlobalInvocationID.xy + 0.5) * vec2(cTexelWidth, cTexelHeight), depth);
	vec4 reflectSS = uPushConsts.projectionMatrix * vec4(P + R, 1.0);
	reflectSS.xyz /= reflectSS.w;
	reflectSS.xy = reflectSS.xy * 0.5 + 0.5;
	vec3 vSS = reflectSS.xyz - pSS;
	
	vec4 rayHitPdf = vec4(hiZTrace(pSS, vSS), pdf);
	imageStore(uRayHitPdfImage, ivec2(gl_GlobalInvocationID.xy), rayHitPdf);
	
	vec2 uvSamplingAttenuation = smoothstep(0.05, 0.1, rayHitPdf.xy) * (1.0 - smoothstep(0.95, 1.0, rayHitPdf.xy));
	vec4 mask = vec4(max(uvSamplingAttenuation.x * uvSamplingAttenuation.y, 0.0));
	mask *= (rayHitPdf.x > 0.0 && rayHitPdf.y > 0.0 && rayHitPdf.x < 1.0 && rayHitPdf.y < 1.0) ? 1.0 : 0.0;
	mask *= dot(N, R) > 1e-7 ? 1.0 : 0.0;
	imageStore(uMaskImage, ivec2(gl_GlobalInvocationID.xy), mask);
}